import React, { useEffect, useState, useRef } from "react";
import firebase from "firebase/app";
import { useFirestoreQuery, useAuthState } from "./hooks";
import { formatRelative } from "date-fns";
import "firebase/auth";
import "firebase/firestore";
// import './indexs.css'
import axios from "axios";
import { useGlobalContext } from "../../../context.js";
import "./bootstrapchat.css";
import { useForm } from "react-hook-form";
import { HiOutlineDocumentDownload } from "react-icons/hi";

const Channel = () => {
  const { restaurant_status_table, baseUrl, chatFileUpload } =
    useGlobalContext();
  const [tableData, setTableData] = useState([]);
  const [Chat, setactiveChat] = useState({});
  const [filetype, setfiletype] = useState("file");

  const activechat = JSON.parse(localStorage.getItem("activechat"));
  useEffect(() => {
    setactiveChat(activechat ? activechat : {});
    console.log(activechat, "---------");
  }, []);

  const [newMessage, setNewMessage] = useState("");
  const inputRef = useRef();
  const bottomListRef = useRef();

	 if (bottomListRef.current) {
    bottomListRef.current.scrollIntoView(
      {
        behavior: 'smooth',
        block: 'end',
        inline: 'nearest'
      })
  }

  // console.log(messages);
  const formatDate = (date) => {
    let formattedDate = "";
    if (date) {
      formattedDate = formatRelative(date, new Date());
      formattedDate =
        formattedDate.charAt(0).toUpperCase() + formattedDate.slice(1);
    }
    return formattedDate;
  };

  const localdata = JSON.parse(localStorage.getItem("user"));
  const allresto = async () => {
    try {
      const result = await axios(restaurant_status_table, {
        headers: { Authorization: localdata.token },
      });
      if (result.status === 200) {
        setTableData(result.data.data);
      } else {
        alert("something get wrong");
      }
    } catch (e) {
      alert(e.message);
    }
  };
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm({ shouldFocusError: true });

  useEffect(() => {
    allresto();
  }, []);

  useEffect(() => {
    if (inputRef.current) {
      inputRef.current.focus();
    }
  }, [inputRef]);

  const activeChat = (data) => {
    localStorage.setItem("activechat", JSON.stringify(data));
    window.location.reload(true);
  };

  const OnSubmit = async (data, e) => {
    var c = Math.random().toString(36).substr(2, 10);

    if (data.files.length > 0) {
      const coverdata = new FormData();
      coverdata.append("chatImage", data.files[0]);

      const result = await axios(chatFileUpload, {
        headers: { Authorization: localdata.token },
        method: "POST",
        data: coverdata,
      });

      if (result.data.status === 200) {
        messagesRef.add({
          id: c,
          text: "",
          createdAt: firebase.firestore.FieldValue.serverTimestamp(),
          user1:
            activechat.firebase_id !== null ||
            activechat.firebase_id !== undefined
              ? activechat.firebase_id
              : "", //restaurant firebase_id
          user2: "admin",
          sender: "admin",
          sendername: "admin",
          receivername: "restaurant name",
          media: result.data.data.trim(),
          seen: "0",
        });
        setNewMessage("");

        if (bottomListRef.current) {
          bottomListRef.current.scrollIntoView(
            {
              behavior: 'smooth',
              block: 'end',
              inline: 'nearest'
            })
        }

      } else {
        alert(result.data.msg);
      }
    } else {
      const trimmedMessage = data.text.trim();
      if (trimmedMessage) {
        messagesRef.add({
          text: trimmedMessage,
          createdAt: firebase.firestore.FieldValue.serverTimestamp(),
          user1:
            activechat.firebase_id !== null ||
            activechat.firebase_id !== undefined
              ? activechat.firebase_id
              : "", //restaurant firebase_id
          user2: "admin",
          sender: "admin",
          sendername: "admin",
          receivername: "restaurant name",
          media: "",
          id: c,
          seen: "0",
        });
        setNewMessage("");
        if (bottomListRef.current) {
          bottomListRef.current.scrollIntoView(
            {
              behavior: 'smooth',
              block: 'end',
              inline: 'nearest'
            })
        }
        e.target.reset();
      }
    }
  };

  const db = firebase.firestore();
  const messagesRef = db.collection("messages");
  const messages = useFirestoreQuery(
    messagesRef
      .orderBy("user1")
      .startAt(
        activechat === null || typeof activechat === "undefined"
          ? ""
          : activechat.firebase_id
      )
      .endAt(
        activechat === null || typeof activechat === "undefined"
          ? ""
          : activechat.firebase_id
      )
  );

  const makeFileType = async () => {
    setfiletype("file");
  };


  return (
    <>
      {activechat === null || typeof activechat === "undefined" ? (
        "please wait"
      ) : (
        <div id="frame">
          <div id="sidepanel">
            <div id="contacts">
              <ul>
                {tableData.map((resto) => {
                  return (
                    <>
                      <li
                        class={
                          activechat.firebase_id === resto.firebase_id
                            ? "contact active"
                            : "contact"
                        }
                        onClick={() => activeChat(resto)}
                      >
                        <div class="wrap">
			  {/* <span class="contact-status online"></span> */}
                          <img src={resto.restaurent_logo ? resto.restaurent_logo : 'https://toppng.com/uploads/preview/donna-picarro-dummy-avatar-115633298255iautrofxa.png' } alt="" height="40px"/>
                          <div class="meta">
                            <p class="name">{resto.name}</p>
                          </div>
                        </div>
                      </li>
                    </>
                  );
                })}
              </ul>
            </div>
          </div>
          <div class="content">
            <div class="contact-profile">
              <img src={activechat.restaurent_logo ? activechat.restaurent_logo : 'https://toppng.com/uploads/preview/donna-picarro-dummy-avatar-115633298255iautrofxa.png'} alt="" />
              <p>{activechat.name}</p>
              
            </div>
            <div class="messages"style={{height: "calc(100vh - 298px) !important"}}>
              <ul className="overflow-auto"
              style={{
                marginBottom: "150px",
              }} >
                {messages
                  ?.sort((first, second) =>
                    first?.createdAt?.seconds <= second?.createdAt?.seconds
                      ? -1
                      : 1
                  )
                  ?.map((messages, i) => {
                    if (messages.id) {
                      if (messages.sender !== "admin") {
                        if (messages.seen === "0") {
                          messagesRef.doc(messages.id).update({ seen: "1" });
                        }
                      }
                    }
                    return (
                      <>
                        <li
                          className={
                            messages.sender === "admin" ? "replies" : "sent"
                          }
                        >
                          {messages.media ? (
                            <a href={messages.media} target="_blank">
                            {
                            (messages.media.split('.')[messages.media.split('.').length - 1] === 'jpeg' || 
                            messages.media.split('.')[messages.media.split('.').length - 1] === 'png' ||
                            messages.media.split('.')[messages.media.split('.').length - 1] === 'jpg' ||
                            messages.media.split('.')[messages.media.split('.').length - 1] === 'JPEG' || 
                            messages.media.split('.')[messages.media.split('.').length - 1] === 'PNG' ||
                            messages.media.split('.')[messages.media.split('.').length - 1] === 'JPG' ||
                            messages.media.split('.')[messages.media.split('.').length - 1] === 'gif' ||
                            messages.media.split('.')[messages.media.split('.').length - 1] === 'webp' ||
                            messages.media.split('.')[messages.media.split('.').length - 1] === 'svg') ? 

                            <img
                              src={messages.media}
                              alt=""
                              width={450}
                              style={{ width: "200px", borderRadius: 0 }}
                            /> : 
                            <>
                            <HiOutlineDocumentDownload size="2.5em" color="rgb(234, 122, 154)" style={{float: messages.sender === "admin" ? 'right' : ''}} />
				    {messages.sender === 'admin' ? <br /> : ''}
                            <span style={{float: messages.sender === "admin" ? 'right' : '', color: 'rgb(234, 122, 154)'}}>{messages.media.split('/')[messages.media.split('/').length - 1]}</span>
                            </>
                            }
                          </a>
                          ) : (
                            <p
                            id={
                              messages.length === i + 1
                                ? "bottomPosition"
                                : ""
                            }
                            className={
                              messages.length === i + 1
                                ? "mb-1 font-bold"
                                : "mb-1 font-bold"
                            }
                              style={
                                messages.sender !== "admin"
                                  ? {
                                      backgroundColor: "#c2c7d8",
                                      color: "black",
                                      padding: "10px",
                                      borderRadius: "5px",
                                    }
                                  : {
                                      backgroundColor: "rgb(234, 122, 154)",
                                      color: "white",
                                      padding: "10px",
                                      borderRadius: "5px",
                                    }
                              }
                            >
                              {messages.text}
                            </p>
                          )}
                          <div className="items-center mb-1">
                            
                            {messages.createdAt?.seconds ? (
                              <span
                                className={
                                  messages.sender === "admin"
                                    ? "text-gray-500 text-xs mr-2 float-right mb-1"
                                    : "text-gray-500 text-xs "
                                }
                                style={ messages.sender === "admin" ? {width:'100%',textAlign:"end"}: {}}
                              >
                                {formatDate(
                                  new Date(messages.createdAt.seconds * 1000)
                                )}
                              </span>
                            ) : null}
                          </div>
                          <div className="clear-both"></div>
                        </li>
                      </>
                    );
                  })}

              </ul>
<div ref={bottomListRef} />
              
            </div>
          <div className="d-inline-block" style={{height:"400px"}}>
          <div class="message-input" style={{ backgroundColor: "white" }}>
              <form onSubmit={handleSubmit(OnSubmit)}>
                <div class="wrap">
                 

                  <label for="theText" className="mb-1 font-bold" style={{marginLeft: '1.5%' }}>
                    Ask a question or send a message
                  </label>
                  <textarea
                    name="theText"
                    id="theText"
                    rows="5"
                    style={{
                      padding: '5px',
                      width: "97%",
                      border: "1px solid grey",
                      marginLeft: "1.5%",
                    }}
                    {...register("text")}
                  />

                  <div class="image-upload" >
                    <label
                      for="file-input"
                      style={{ display: "block", backgroundColor: "red"}}
                    >
                      /* <i
                      style={{ marginRight: "1.5%"}}
                        class="fa fa-paperclip fa-5x attachment mt-3"
                        aria-hidden="true"
                      ></i>*/
	             <svg viewBox="0 0 24 24" width="24" height="24" class=""><path fill="currentColor" d="M1.816 15.556v.002c0 1.502.584 2.912 1.646 3.972s2.472 1.647 3.974 1.647a5.58 5.58 0 0 0 3.972-1.645l9.547-9.548c.769-.768 1.147-1.767 1.058-2.817-.079-.968-.548-1.927-1.319-2.698-1.594-1.592-4.068-1.711-5.517-.262l-7.916 7.915c-.881.881-.792 2.25.214 3.261.959.958 2.423 1.053 3.263.215l5.511-5.512c.28-.28.267-.722.053-.936l-.244-.244c-.191-.191-.567-.349-.957.04l-5.506 5.506c-.18.18-.635.127-.976-.214-.098-.097-.576-.613-.213-.973l7.915-7.917c.818-.817 2.267-.699 3.23.262.5.501.802 1.1.849 1.685.051.573-.156 1.111-.589 1.543l-9.547 9.549a3.97 3.97 0 0 1-2.829 1.171 3.975 3.975 0 0 1-2.83-1.173 3.973 3.973 0 0 1-1.172-2.828c0-1.071.415-2.076 1.172-2.83l7.209-7.211c.157-.157.264-.579.028-.814L11.5 4.36a.572.572 0 0 0-.834.018l-7.205 7.207a5.577 5.577 0 0 0-1.645 3.971z"></path></svg>
                    </label>
                    <input
                      type="file"
                      name="files"
                      style={{ display: "none" }}
                      id="file-input"
                      {...register("files")}
                    />
                  </div>
                  <button type="submit" class="submit" style={{ marginRight: "1.5%" ,backgroundColor: "rgb(234, 122, 154)",
                borderRadius: "5px",
                border: "none" }}>
                    send
                  </button>

                </div>
              </form>
            </div>
          </div>
          </div>
        </div>
      )}
    </>
  );
};

export default Channel;

